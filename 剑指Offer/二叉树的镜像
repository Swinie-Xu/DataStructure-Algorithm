/**
 * struct TreeNode {
 *	int val;
 *	struct TreeNode *left;
 *	struct TreeNode *right;
 *	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pRoot TreeNode类 
     * @return TreeNode类
     */
    TreeNode* Mirror(TreeNode* pRoot) {
        // write code here
        // 也是看着答案写的，勉强理解了吧，下一次自己写一次就行。
        if(!pRoot) return pRoot; // 空树直接返回
        stack<TreeNode*> s; //创建辅助栈结构
        s.push(pRoot); //将根结点压入栈内
        while(!s.empty())
        {
            //根节点弹栈
            TreeNode* node = s.top();
            s.pop();
            //如果根结点不为null，则将其左右子树分别压入栈内
            if(node->left) s.push(node->left);
            if(node->right) s.push(node->right);
            //然后交换左右子树
            TreeNode* tmp = node->left;
            node->left = node->right;
            node->right = tmp;
        }
        return pRoot;
    }
};
