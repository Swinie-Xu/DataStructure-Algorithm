class Solution {
public:
    int minNumberInRotateArray(vector<int> rotateArray) {
        // 二分查找算法不限于运用在有序数组上。如果能够明确二分之后，答案存在于二分的某一侧，就可以使用二分。
        // 猜测这个和mid位置比较的target最好是同一个东西比如右端点
        // 选取端点需要注意是否会产生二义性，比如左端点同一个判断结果，但是target并非处在同一区间，就不能选取左端点
        int left  = 0;
        int right  = rotateArray.size()-1;
        while (left < right)
        {
            // 这是0个前面的元素被放到后面，服了！
            if(rotateArray[left]<rotateArray[right])
            {
                return rotateArray[left];
            }
            
            // int mid = (left+right)/2;
            int mid=left+right>>1;//加法的优先级高于位运算 所以不需要加括号
            // 这里不知道为什么要跟右边的比较。。。
            if (rotateArray[mid]>rotateArray[right])
            {
                left = mid+1;
            }
            else if(rotateArray[mid]<rotateArray[right])
            {
                
                right = mid;
            }
            else // 这里是无法确定区间了，只能一个一个试了
            {
                right--;
            }
        }
        return rotateArray[right];
        
    }
};
